{"version":3,"file":"intl-messageformat.js","sources":["../src/compiler.ts","../src/core.ts","../src/en.ts","../src/index.ts"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\nimport {\n  MessageFormatPattern,\n  MessageTextElement,\n  ArgumentElement,\n  PluralFormat as ParserPluralFormat,\n  SelectFormat as ParserSelectFormat\n} from \"intl-messageformat-parser\";\n\nexport interface Formats {\n  number: Record<string, Intl.NumberFormatOptions>;\n  date: Record<string, Intl.DateTimeFormatOptions>;\n  time: Record<string, Intl.DateTimeFormatOptions>;\n}\n\nexport type Pattern =\n  | string\n  | PluralOffsetString\n  | PluralFormat\n  | SelectFormat\n  | StringFormat;\n\nexport default class Compiler {\n  private locales: string | string[] = [];\n  private formats: Formats = {\n    number: {},\n    date: {},\n    time: {}\n  };\n  private pluralNumberFormat: Intl.NumberFormat | null = null;\n  private currentPlural: ArgumentElement | null | undefined = null;\n  private pluralStack: Array<ArgumentElement | null | undefined> = [];\n\n  constructor(locales: string | string[], formats: Formats) {\n    this.locales = locales;\n    this.formats = formats;\n  }\n\n  compile(ast: MessageFormatPattern): Pattern[] {\n    this.pluralStack = [];\n    this.currentPlural = null;\n    this.pluralNumberFormat = null;\n\n    return this.compileMessage(ast);\n  }\n\n  compileMessage(ast: MessageFormatPattern) {\n    if (!(ast && ast.type === \"messageFormatPattern\")) {\n      throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n    }\n    const { elements } = ast;\n    const pattern = elements\n      .filter<MessageTextElement | ArgumentElement>(\n        (el): el is MessageTextElement | ArgumentElement =>\n          el.type === \"messageTextElement\" || el.type === \"argumentElement\"\n      )\n      .map(el =>\n        el.type === \"messageTextElement\"\n          ? this.compileMessageText(el)\n          : this.compileArgument(el)\n      );\n    if (pattern.length !== elements.length) {\n      throw new Error(\"Message element does not have a valid type\");\n    }\n\n    return pattern;\n  }\n\n  compileMessageText(element: MessageTextElement) {\n    // When this `element` is part of plural sub-pattern and its value contains\n    // an unescaped '#', use a `PluralOffsetString` helper to properly output\n    // the number with the correct offset in the string.\n    if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n      // Create a cache a NumberFormat instance that can be reused for any\n      // PluralOffsetString instance in this message.\n      if (!this.pluralNumberFormat) {\n        this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n      }\n\n      return new PluralOffsetString(\n        this.currentPlural.id,\n        (this.currentPlural.format as ParserPluralFormat).offset,\n        this.pluralNumberFormat,\n        element.value\n      );\n    }\n\n    // Unescape the escaped '#'s in the message text.\n    return element.value.replace(/\\\\#/g, \"#\");\n  }\n\n  compileArgument(element: ArgumentElement) {\n    const { format, id } = element;\n\n    if (!format) {\n      return new StringFormat(id);\n    }\n\n    const { formats, locales } = this;\n    switch (format.type) {\n      case \"numberFormat\":\n        return {\n          id,\n          format: new Intl.NumberFormat(locales, formats.number[format.style])\n            .format\n        };\n\n      case \"dateFormat\":\n        return {\n          id,\n          format: new Intl.DateTimeFormat(locales, formats.date[format.style])\n            .format\n        };\n\n      case \"timeFormat\":\n        return {\n          id,\n          format: new Intl.DateTimeFormat(locales, formats.time[format.style])\n            .format\n        };\n\n      case \"pluralFormat\":\n        return new PluralFormat(\n          id,\n          format.ordinal,\n          format.offset,\n          this.compileOptions(element),\n          locales\n        );\n\n      case \"selectFormat\":\n        return new SelectFormat(id, this.compileOptions(element));\n\n      default:\n        throw new Error(\"Message element does not have a valid format type\");\n    }\n  }\n\n  compileOptions(element: ArgumentElement) {\n    const format = element.format as ParserPluralFormat | ParserSelectFormat;\n    const { options } = format;\n    const optionsHash: Record<string, Array<Pattern>> = {};\n\n    // Save the current plural element, if any, then set it to a new value when\n    // compiling the options sub-patterns. This conforms the spec's algorithm\n    // for handling `\"#\"` syntax in message text.\n    this.pluralStack.push(this.currentPlural);\n    this.currentPlural = format.type === \"pluralFormat\" ? element : null;\n\n    var i, len, option;\n\n    for (i = 0, len = options.length; i < len; i += 1) {\n      option = options[i];\n\n      // Compile the sub-pattern and save it under the options's selector.\n      optionsHash[option.selector] = this.compileMessage(option.value);\n    }\n\n    // Pop the plural stack to put back the original current plural value.\n    this.currentPlural = this.pluralStack.pop();\n\n    return optionsHash;\n  }\n}\n\n// -- Compiler Helper Classes --------------------------------------------------\n\nabstract class Formatter {\n  public id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n  abstract format(value: string | number): string;\n}\n\nexport class StringFormat extends Formatter {\n  format(value: number | string) {\n    if (!value && typeof value !== \"number\") {\n      return \"\";\n    }\n\n    return typeof value === \"string\" ? value : String(value);\n  }\n}\n\nexport class PluralFormat {\n  public id: string;\n  private offset: number;\n  private options: Record<string, Pattern[]>;\n  private pluralRules: Intl.PluralRules;\n  constructor(\n    id: string,\n    useOrdinal: boolean,\n    offset: number,\n    options: Record<string, Pattern[]>,\n    locales: string | string[]\n  ) {\n    this.id = id;\n    this.offset = offset;\n    this.options = options;\n    this.pluralRules = new Intl.PluralRules(locales, {\n      type: useOrdinal ? \"ordinal\" : \"cardinal\"\n    });\n  }\n\n  getOption(value: number) {\n    const { options } = this;\n\n    const option =\n      options[\"=\" + value] ||\n      options[this.pluralRules.select(value - this.offset)];\n\n    return option || options.other;\n  }\n}\n\nexport class PluralOffsetString extends Formatter {\n  private offset: number;\n  private numberFormat: Intl.NumberFormat;\n  private string: string;\n  constructor(\n    id: string,\n    offset: number,\n    numberFormat: Intl.NumberFormat,\n    string: string\n  ) {\n    super(id);\n    this.offset = offset;\n    this.numberFormat = numberFormat;\n    this.string = string;\n  }\n\n  format(value: number) {\n    var number = this.numberFormat.format(value - this.offset);\n\n    return this.string\n      .replace(/(^|[^\\\\])#/g, \"$1\" + number)\n      .replace(/\\\\#/g, \"#\");\n  }\n}\n\nexport class SelectFormat {\n  public id: string;\n  private options: Record<string, Pattern[]>;\n  constructor(id: string, options: Record<string, Pattern[]>) {\n    this.id = id;\n    this.options = options;\n  }\n\n  getOption(value: string) {\n    var options = this.options;\n    return options[value] || options.other;\n  }\n}\n\nexport function isSelectOrPluralFormat(\n  f: any\n): f is SelectFormat | PluralFormat {\n  return !!f.options;\n}\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nimport Compiler, { Formats, isSelectOrPluralFormat, Pattern } from \"./compiler\";\nimport parser, { MessageFormatPattern } from \"intl-messageformat-parser\";\n\n// -- MessageFormat --------------------------------------------------------\n\nexport default class MessageFormat<T> {\n  public static defaultLocale: string;\n  private static __localeData__: Record<string, any>;\n  // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n  public static readonly formats: Formats = {\n    number: {\n      currency: {\n        style: \"currency\"\n      },\n\n      percent: {\n        style: \"percent\"\n      }\n    },\n\n    date: {\n      short: {\n        month: \"numeric\",\n        day: \"numeric\",\n        year: \"2-digit\"\n      },\n\n      medium: {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\"\n      },\n\n      long: {\n        month: \"long\",\n        day: \"numeric\",\n        year: \"numeric\"\n      },\n\n      full: {\n        weekday: \"long\",\n        month: \"long\",\n        day: \"numeric\",\n        year: \"numeric\"\n      }\n    },\n\n    time: {\n      short: {\n        hour: \"numeric\",\n        minute: \"numeric\"\n      },\n\n      medium: {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n      },\n\n      long: {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        timeZoneName: \"short\"\n      },\n\n      full: {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        timeZoneName: \"short\"\n      }\n    }\n  };\n  private _locale: string;\n  private pattern: ReturnType<Compiler[\"compile\"]>;\n  private message: string;\n  constructor(\n    message: string,\n    locales?: string | string[],\n    overrideFormats?: Formats\n  ) {\n    // Parse string messages into an AST.\n    var ast =\n      typeof message === \"string\" ? MessageFormat.__parse(message) : message;\n\n    if (!(ast && ast.type === \"messageFormatPattern\")) {\n      throw new TypeError(\"A message must be provided as a String or AST.\");\n    }\n\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    const formats = mergeConfigs(MessageFormat.formats, overrideFormats);\n\n    // Defined first because it's used to build the format pattern.\n    this._locale = this._resolveLocale(locales || []);\n\n    // Compile the `ast` to a pattern that is highly optimized for repeated\n    // `format()` invocations. **Note:** This passes the `locales` set provided\n    // to the constructor instead of just the resolved locale.\n    this.pattern = this._compilePattern(ast, locales || [], formats);\n\n    this.message = message;\n  }\n  static __addLocaleData(data: { locale: string; [locale: string]: any }) {\n    if (!(data && data.locale)) {\n      throw new Error(\n        \"Locale data provided to IntlMessageFormat is missing a \" +\n          \"`locale` property\"\n      );\n    }\n\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n  }\n\n  public static __parse = parser.parse;\n\n  // \"Bind\" `format()` method to `this` so it can be passed by reference like\n  // the other `Intl` APIs.\n  format = (values: Record<string, string | number>) => {\n    try {\n      return this._format(this.pattern, values);\n    } catch (e) {\n      if (e.variableId) {\n        throw new Error(\n          \"The intl string context variable '\" +\n            e.variableId +\n            \"'\" +\n            \" was not provided to the string '\" +\n            this.message +\n            \"'\"\n        );\n      } else {\n        throw e;\n      }\n    }\n  };\n  resolvedOptions() {\n    return { locale: this._locale };\n  }\n\n  _resolveLocale(locales: string | string[]): string {\n    if (typeof locales === \"string\") {\n      locales = [locales];\n    }\n\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(MessageFormat.defaultLocale);\n\n    var localeData = MessageFormat.__localeData__;\n    var i, len, localeParts, data;\n\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n      localeParts = locales[i].toLowerCase().split(\"-\");\n\n      while (localeParts.length) {\n        data = localeData[localeParts.join(\"-\")];\n        if (data) {\n          // Return the normalized locale string; e.g., we return \"en-US\",\n          // instead of \"en-us\".\n          return data.locale;\n        }\n\n        localeParts.pop();\n      }\n    }\n\n    var defaultLocale = locales.pop();\n    throw new Error(\n      \"No locale data has been added to IntlMessageFormat for: \" +\n        locales.join(\", \") +\n        \", or the default locale: \" +\n        defaultLocale\n    );\n  }\n  _compilePattern(\n    ast: MessageFormatPattern,\n    locales: string | string[],\n    formats: Formats\n  ) {\n    var compiler = new Compiler(locales, formats);\n    return compiler.compile(ast);\n  }\n  _format(pattern: Pattern[], values: Record<string, string | number>) {\n    var result = \"\",\n      i,\n      len,\n      part,\n      id,\n      value,\n      err;\n\n    for (i = 0, len = pattern.length; i < len; i += 1) {\n      part = pattern[i];\n\n      // Exist early for string parts.\n      if (typeof part === \"string\") {\n        result += part;\n        continue;\n      }\n\n      id = part.id;\n\n      // Enforce that all required values are provided by the caller.\n      if (!(values && id in values)) {\n        throw new FormatError(\"A value must be provided for: \" + id, id);\n      }\n\n      value = values[id];\n\n      // Recursively format plural and select parts' option — which can be a\n      // nested pattern structure. The choosing of the option to use is\n      // abstracted-by and delegated-to the part helper object.\n      if (isSelectOrPluralFormat(part)) {\n        result += this._format(part.getOption(value as any), values);\n      } else {\n        result += part.format(value as any);\n      }\n    }\n\n    return result;\n  }\n}\n\nfunction mergeConfig(c1: Record<string, object>, c2: Record<string, object>) {\n  if (!c2) {\n    return c1;\n  }\n  return {\n    ...(c1 || {}),\n    ...(c2 || {}),\n    ...Object.keys(c1).reduce((all: Record<string, object>, k) => {\n      all[k] = {\n        ...c1[k],\n        ...(c2[k] || {})\n      };\n      return all;\n    }, {})\n  };\n}\n\nfunction mergeConfigs<T extends Formats>(\n  defaultConfig: Formats,\n  configs?: T\n): Formats {\n  if (!configs) {\n    return defaultConfig;\n  }\n\n  return {\n    ...defaultConfig,\n    date: mergeConfig(defaultConfig.date, configs.date)\n  };\n}\n\nclass FormatError extends Error {\n  public readonly variableId?: string;\n  constructor(msg?: string, variableId?: string) {\n    super(msg);\n    this.variableId = variableId;\n  }\n}\n","/* @generated */\nexport default {\"locale\":\"en\"};\n","/* jslint esnext: true */\n\nimport IntlMessageFormat from \"./core\";\nimport defaultLocale from \"./en\";\n\nIntlMessageFormat.__addLocaleData(defaultLocale);\nIntlMessageFormat.defaultLocale = \"en\";\n\nexport default IntlMessageFormat;\n"],"names":["tslib_1.__extends","IntlMessageFormat"],"mappings":"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"}